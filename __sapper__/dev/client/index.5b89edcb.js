import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, f as element, u as space, h as text, j as claim_element, k as children, v as claim_space, l as claim_text, m as detach_dev, w as attr_dev, o as add_location, p as insert_dev, q as append_dev, r as set_data_dev, n as noop, z as create_component, A as claim_component, B as mount_component, t as transition_in, e as transition_out, E as destroy_component, H as check_outros, J as destroy_each, G as group_outros } from './index.aa4f4c5c.js';

/* src/components/ProfileCard.svelte generated by Svelte v3.16.7 */

const file = "src/components/ProfileCard.svelte";

function create_fragment(ctx) {
	let div5;
	let div4;
	let img;
	let img_src_value;
	let t0;
	let div3;
	let h2;
	let t1_value = /*user*/ ctx[0].name.first + "";
	let t1;
	let t2;
	let t3_value = /*user*/ ctx[0].name.last + "";
	let t3;
	let t4;
	let t5;
	let div0;
	let t6;
	let t7;
	let div1;
	let t8_value = /*user*/ ctx[0].email + "";
	let t8;
	let t9;
	let div2;
	let t10_value = /*user*/ ctx[0].cell + "";
	let t10;
	let t11;
	let a;
	let t12;

	const block = {
		c: function create() {
			div5 = element("div");
			div4 = element("div");
			img = element("img");
			t0 = space();
			div3 = element("div");
			h2 = element("h2");
			t1 = text(t1_value);
			t2 = space();
			t3 = text(t3_value);
			t4 = text("!");
			t5 = space();
			div0 = element("div");
			t6 = text("User Profession");
			t7 = space();
			div1 = element("div");
			t8 = text(t8_value);
			t9 = space();
			div2 = element("div");
			t10 = text(t10_value);
			t11 = space();
			a = element("a");
			t12 = text("Email");
			this.h();
		},
		l: function claim(nodes) {
			div5 = claim_element(nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			img = claim_element(div4_nodes, "IMG", { class: true, src: true, alt: true });
			t0 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			h2 = claim_element(div3_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, t1_value);
			t2 = claim_space(h2_nodes);
			t3 = claim_text(h2_nodes, t3_value);
			t4 = claim_text(h2_nodes, "!");
			h2_nodes.forEach(detach_dev);
			t5 = claim_space(div3_nodes);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t6 = claim_text(div0_nodes, "User Profession");
			div0_nodes.forEach(detach_dev);
			t7 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t8 = claim_text(div1_nodes, t8_value);
			div1_nodes.forEach(detach_dev);
			t9 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t10 = claim_text(div2_nodes, t10_value);
			div2_nodes.forEach(detach_dev);
			t11 = claim_space(div3_nodes);
			a = claim_element(div3_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t12 = claim_text(a_nodes, "Email");
			a_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", "h-16 w-16 md:h-24 md:w-24 rounded-full mx-auto md:mx-0 md:mr-6");
			if (img.src !== (img_src_value = /*user*/ ctx[0].picture.medium)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Avatar");
			add_location(img, file, 7, 4, 175);
			attr_dev(h2, "class", "text-lg capitalize");
			add_location(h2, file, 12, 6, 360);
			attr_dev(div0, "class", "text-purple-500");
			add_location(div0, file, 13, 6, 438);
			attr_dev(div1, "class", "text-gray-600");
			add_location(div1, file, 14, 6, 495);
			attr_dev(div2, "class", "text-gray-600");
			add_location(div2, file, 15, 6, 547);
			attr_dev(a, "href", "javascript:;");
			attr_dev(a, "class", "btn btn-primary mt-2");
			add_location(a, file, 17, 6, 599);
			attr_dev(div3, "class", "text-center md:text-left");
			add_location(div3, file, 11, 4, 315);
			attr_dev(div4, "class", "md:flex bg-white rounded-lg p-6");
			add_location(div4, file, 6, 2, 125);
			attr_dev(div5, "class", "shadow-lg leading-normal self-end bg-white rounded-lg m-10 relative");
			add_location(div5, file, 4, 0, 39);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div5, anchor);
			append_dev(div5, div4);
			append_dev(div4, img);
			append_dev(div4, t0);
			append_dev(div4, div3);
			append_dev(div3, h2);
			append_dev(h2, t1);
			append_dev(h2, t2);
			append_dev(h2, t3);
			append_dev(h2, t4);
			append_dev(div3, t5);
			append_dev(div3, div0);
			append_dev(div0, t6);
			append_dev(div3, t7);
			append_dev(div3, div1);
			append_dev(div1, t8);
			append_dev(div3, t9);
			append_dev(div3, div2);
			append_dev(div2, t10);
			append_dev(div3, t11);
			append_dev(div3, a);
			append_dev(a, t12);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*user*/ 1 && img.src !== (img_src_value = /*user*/ ctx[0].picture.medium)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*user*/ 1 && t1_value !== (t1_value = /*user*/ ctx[0].name.first + "")) set_data_dev(t1, t1_value);
			if (dirty & /*user*/ 1 && t3_value !== (t3_value = /*user*/ ctx[0].name.last + "")) set_data_dev(t3, t3_value);
			if (dirty & /*user*/ 1 && t8_value !== (t8_value = /*user*/ ctx[0].email + "")) set_data_dev(t8, t8_value);
			if (dirty & /*user*/ 1 && t10_value !== (t10_value = /*user*/ ctx[0].cell + "")) set_data_dev(t10, t10_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { user } = $$props;
	const writable_props = ["user"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ProfileCard> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("user" in $$props) $$invalidate(0, user = $$props.user);
	};

	$$self.$capture_state = () => {
		return { user };
	};

	$$self.$inject_state = $$props => {
		if ("user" in $$props) $$invalidate(0, user = $$props.user);
	};

	return [user];
}

class ProfileCard extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { user: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ProfileCard",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*user*/ ctx[0] === undefined && !("user" in props)) {
			console.warn("<ProfileCard> was created without expected prop 'user'");
		}
	}

	get user() {
		throw new Error("<ProfileCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set user(value) {
		throw new Error("<ProfileCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/index.svelte generated by Svelte v3.16.7 */
const file$1 = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (22:0) {#each users as user}
function create_each_block(ctx) {
	let current;

	const profilecard = new ProfileCard({
			props: { user: /*user*/ ctx[1] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(profilecard.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(profilecard.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(profilecard, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const profilecard_changes = {};
			if (dirty & /*users*/ 1) profilecard_changes.user = /*user*/ ctx[1];
			profilecard.$set(profilecard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(profilecard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(profilecard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(profilecard, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(22:0) {#each users as user}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let t0;
	let t1;
	let div;
	let current;
	let each_value = /*users*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			t0 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			t1 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Sapper + TailwindCSS Starter";
			attr_dev(div, "class", "order-1 bg-teal-300 bg-teal object-fit");
			add_location(div, file$1, 25, 0, 480);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, t1, anchor);
			insert_dev(target, div, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*users*/ 1) {
				each_value = /*users*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(t1.parentNode, t1);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params }) {
	const res = await this.fetch("https://randomuser.me/api/?results=4");
	const users = await res.json();
	return { users: users.results };
}

function instance$1($$self, $$props, $$invalidate) {
	let { users } = $$props;
	const writable_props = ["users"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("users" in $$props) $$invalidate(0, users = $$props.users);
	};

	$$self.$capture_state = () => {
		return { users };
	};

	$$self.$inject_state = $$props => {
		if ("users" in $$props) $$invalidate(0, users = $$props.users);
	};

	return [users];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { users: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*users*/ ctx[0] === undefined && !("users" in props)) {
			console.warn("<Routes> was created without expected prop 'users'");
		}
	}

	get users() {
		throw new Error("<Routes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set users(value) {
		throw new Error("<Routes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Routes;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNWI4OWVkY2IuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1Byb2ZpbGVDYXJkLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGV4cG9ydCBsZXQgdXNlcjtcbjwvc2NyaXB0PlxuXG48ZGl2XG4gIGNsYXNzPVwic2hhZG93LWxnIGxlYWRpbmctbm9ybWFsIHNlbGYtZW5kIGJnLXdoaXRlIHJvdW5kZWQtbGcgbS0xMCByZWxhdGl2ZVwiPlxuICA8ZGl2IGNsYXNzPVwibWQ6ZmxleCBiZy13aGl0ZSByb3VuZGVkLWxnIHAtNlwiPlxuICAgIDxpbWdcbiAgICAgIGNsYXNzPVwiaC0xNiB3LTE2IG1kOmgtMjQgbWQ6dy0yNCByb3VuZGVkLWZ1bGwgbXgtYXV0byBtZDpteC0wIG1kOm1yLTZcIlxuICAgICAgc3JjPXt1c2VyLnBpY3R1cmUubWVkaXVtfVxuICAgICAgYWx0PVwiQXZhdGFyXCIgLz5cbiAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXIgbWQ6dGV4dC1sZWZ0XCI+XG4gICAgICA8aDIgY2xhc3M9XCJ0ZXh0LWxnIGNhcGl0YWxpemVcIj57dXNlci5uYW1lLmZpcnN0fSB7dXNlci5uYW1lLmxhc3R9ITwvaDI+XG4gICAgICA8ZGl2IGNsYXNzPVwidGV4dC1wdXJwbGUtNTAwXCI+VXNlciBQcm9mZXNzaW9uPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwidGV4dC1ncmF5LTYwMFwiPnt1c2VyLmVtYWlsfTwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInRleHQtZ3JheS02MDBcIj57dXNlci5jZWxsfTwvZGl2PlxuXG4gICAgICA8YSBocmVmPVwiamF2YXNjcmlwdDo7XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgbXQtMlwiPkVtYWlsPC9hPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuIiwiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG4gIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVsb2FkKHsgcGFyYW1zIH0pIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmZldGNoKCdodHRwczovL3JhbmRvbXVzZXIubWUvYXBpLz9yZXN1bHRzPTQnKTtcbiAgICBjb25zdCB1c2VycyA9IGF3YWl0IHJlcy5qc29uKCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdXNlcnM6IHVzZXJzLnJlc3VsdHNcbiAgICB9O1xuICB9XG48L3NjcmlwdD5cblxuPHNjcmlwdD5cbiAgaW1wb3J0IFByb2ZpbGVDYXJkIGZyb20gJy4uL2NvbXBvbmVudHMvUHJvZmlsZUNhcmQuc3ZlbHRlJztcblxuICBleHBvcnQgbGV0IHVzZXJzO1xuPC9zY3JpcHQ+XG5cbjxzdmVsdGU6aGVhZD5cbiAgPHRpdGxlPlNhcHBlciArIFRhaWx3aW5kQ1NTIFN0YXJ0ZXI8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxueyNlYWNoIHVzZXJzIGFzIHVzZXJ9XG4gIDxQcm9maWxlQ2FyZCB7dXNlcn0gLz5cbnsvZWFjaH1cblxuPGRpdiBjbGFzcz1cIm9yZGVyLTEgYmctdGVhbC0zMDAgYmctdGVhbCBvYmplY3QtZml0XCI+XG5cbjwvZGl2PlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O3lCQVlzQyxHQUFJLElBQUMsSUFBSSxDQUFDLEtBQUs7Ozt5QkFBRyxHQUFJLElBQUMsSUFBSSxDQUFDLElBQUk7Ozs7Ozs7O3lCQUVwQyxHQUFJLElBQUMsS0FBSzs7OzswQkFDVixHQUFJLElBQUMsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZDQU5oQyxHQUFJLElBQUMsT0FBTyxDQUFDLE1BQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bUVBQW5CLEdBQUksSUFBQyxPQUFPLENBQUMsTUFBTTs7OzsrREFHUSxHQUFJLElBQUMsSUFBSSxDQUFDLEtBQUs7K0RBQUcsR0FBSSxJQUFDLElBQUksQ0FBQyxJQUFJOytEQUVwQyxHQUFJLElBQUMsS0FBSztpRUFDVixHQUFJLElBQUMsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BZDlCLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJDb0JWLEdBQUs7OztnQ0FBVixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkJBQUMsR0FBSzs7OytCQUFWLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBQUosTUFBSTs7Ozs7Ozs7OztrQ0FBSixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBcEJrQixPQUFPLEdBQUcsTUFBTTtPQUM5QixHQUFHLFNBQVMsSUFBSSxDQUFDLEtBQUssQ0FBQyxzQ0FBc0M7T0FDN0QsS0FBSyxTQUFTLEdBQUcsQ0FBQyxJQUFJO1VBRzFCLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTzs7OztPQUhiLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
