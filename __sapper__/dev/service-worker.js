(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1600319927734;

	const files = [
		"service-worker-index.html",
		".DS_Store",
		"falling/0.png",
		"falling/1.png",
		"falling/2.png",
		"falling/3.png",
		"falling/4.png",
		"falling/5.png",
		"falling/6.png",
		"falling/7.png",
		"favicon.png",
		"global.css",
		"hero-scrapbook.png",
		"home-bike.png",
		"logo-192.png",
		"logo-512.png",
		"manifest.json",
		"parallax/parallax0.png",
		"parallax/parallax1.png",
		"parallax/parallax2.png",
		"parallax/parallax3.png",
		"parallax/parallax4.png",
		"parallax/parallax5.png",
		"parallax/parallax6.png",
		"parallax/parallax7.png",
		"parallax/parallax8.png",
		"run-dance.png"
	];

	const shell = [
		"client/client.a1a99214.js",
		"client/index.3f24730c.js",
		"client/sapper-dev-client.1e7a4a5e.js",
		"client/client.2599bb80.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
	  event.waitUntil(
	    caches
	      .open(ASSETS)
	      .then(cache => cache.addAll(to_cache))
	      .then(() => {
	        self.skipWaiting();
	      })
	  );
	});

	self.addEventListener('activate', event => {
	  event.waitUntil(
	    caches.keys().then(async keys => {
	      // delete old caches
	      for (const key of keys) {
	        if (key !== ASSETS) await caches.delete(key);
	      }

	      self.clients.claim();
	    })
	  );
	});

	self.addEventListener('fetch', event => {
	  if (event.request.method !== 'GET' || event.request.headers.has('range'))
	    return;

	  const url = new URL(event.request.url);

	  // don't try to handle e.g. data: URIs
	  if (!url.protocol.startsWith('http')) return;

	  // ignore dev server requests
	  if (
	    url.hostname === self.location.hostname &&
	    url.port !== self.location.port
	  )
	    return;

	  // always serve static files and bundler-generated assets from cache
	  if (url.host === self.location.host && cached.has(url.pathname)) {
	    event.respondWith(caches.match(event.request));
	    return;
	  }

	  // for pages, you might want to serve a shell `service-worker-index.html` file,
	  // which Sapper has generated for you. It's not right for every
	  // app, but if it's right for yours then uncomment this section
	  /*
	  if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
	    event.respondWith(caches.match('/service-worker-index.html'));
	    return;
	  }
	  */

	  if (event.request.cache === 'only-if-cached') return;

	  // for everything else, try the network first, falling back to
	  // cache if the user is offline. (If the pages never change, you
	  // might prefer a cache-first approach to a network-first one.)
	  event.respondWith(
	    caches.open(`offline${timestamp}`).then(async cache => {
	      try {
	        const response = await fetch(event.request);
	        cache.put(event.request, response.clone());
	        return response;
	      } catch (err) {
	        const response = await cache.match(event.request);
	        if (response) return response;

	        throw err;
	      }
	    })
	  );
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
